{
  "print": {
    "prefix": "p",
    "body": ["print($1)"],
    "description": "Print statement"
  },
  "print with format": {
    "prefix": "pf",
    "body": ["print(f\"$1\")"],
    "description": "Print with f-string"
  },
  "function": {
    "prefix": "def",
    "body": ["def ${1:function_name}(${2:parameters}):", "    \"\"\"${3:docstring}\"\"\"", "    ${4:pass}"],
    "description": "Function definition"
  },
  "class": {
    "prefix": "class",
    "body": ["class ${1:ClassName}:", "    \"\"\"${2:docstring}\"\"\"", "    ", "    def __init__(self${3:, parameters}):", "        ${4:pass}"],
    "description": "Class definition"
  },
  "__init__": {
    "prefix": "init",
    "body": ["def __init__(self${1:, parameters}):", "    ${2:pass}"],
    "description": "Constructor method"
  },
  "method": {
    "prefix": "method",
    "body": ["def ${1:method_name}(self${2:, parameters}):", "    \"\"\"${3:docstring}\"\"\"", "    ${4:pass}"],
    "description": "Class method"
  },
  "staticmethod": {
    "prefix": "static",
    "body": ["@staticmethod", "def ${1:method_name}(${2:parameters}):", "    \"\"\"${3:docstring}\"\"\"", "    ${4:pass}"],
    "description": "Static method"
  },
  "classmethod": {
    "prefix": "cls",
    "body": ["@classmethod", "def ${1:method_name}(cls${2:, parameters}):", "    \"\"\"${3:docstring}\"\"\"", "    ${4:pass}"],
    "description": "Class method"
  },
  "property": {
    "prefix": "prop",
    "body": ["@property", "def ${1:property_name}(self):", "    \"\"\"${2:docstring}\"\"\"", "    return self._${1:property_name}"],
    "description": "Property getter"
  },
  "setter": {
    "prefix": "setter",
    "body": ["@${1:property_name}.setter", "def ${1:property_name}(self, value):", "    \"\"\"${2:docstring}\"\"\"", "    self._${1:property_name} = value"],
    "description": "Property setter"
  },
  "if __name__ == '__main__'": {
    "prefix": "main",
    "body": ["if __name__ == '__main__':", "    ${1:pass}"],
    "description": "Main guard"
  },
  "for loop": {
    "prefix": "for",
    "body": ["for ${1:item} in ${2:iterable}:", "    ${3:pass}"],
    "description": "For loop"
  },
  "for enumerate": {
    "prefix": "fore",
    "body": ["for ${1:index}, ${2:item} in enumerate(${3:iterable}):", "    ${4:pass}"],
    "description": "For loop with enumerate"
  },
  "for range": {
    "prefix": "forr",
    "body": ["for ${1:i} in range(${2:n}):", "    ${3:pass}"],
    "description": "For loop with range"
  },
  "while loop": {
    "prefix": "while",
    "body": ["while ${1:condition}:", "    ${2:pass}"],
    "description": "While loop"
  },
  "if statement": {
    "prefix": "if",
    "body": ["if ${1:condition}:", "    ${2:pass}"],
    "description": "If statement"
  },
  "if...else statement": {
    "prefix": "ife",
    "body": ["if ${1:condition}:", "    ${2:pass}", "else:", "    ${3:pass}"],
    "description": "If...else statement"
  },
  "if...elif...else statement": {
    "prefix": "ifel",
    "body": ["if ${1:condition}:", "    ${2:pass}", "elif ${3:condition}:", "    ${4:pass}", "else:", "    ${5:pass}"],
    "description": "If...elif...else statement"
  },
  "try...except": {
    "prefix": "try",
    "body": ["try:", "    ${1:pass}", "except ${2:Exception} as ${3:e}:", "    ${4:pass}"],
    "description": "Try...except block"
  },
  "try...except...finally": {
    "prefix": "tryf",
    "body": ["try:", "    ${1:pass}", "except ${2:Exception} as ${3:e}:", "    ${4:pass}", "finally:", "    ${5:pass}"],
    "description": "Try...except...finally block"
  },
  "with statement": {
    "prefix": "with",
    "body": ["with ${1:expression} as ${2:variable}:", "    ${3:pass}"],
    "description": "With statement"
  },
  "list comprehension": {
    "prefix": "lc",
    "body": ["[${1:expression} for ${2:item} in ${3:iterable}]"],
    "description": "List comprehension"
  },
  "list comprehension with condition": {
    "prefix": "lcc",
    "body": ["[${1:expression} for ${2:item} in ${3:iterable} if ${4:condition}]"],
    "description": "List comprehension with condition"
  },
  "dict comprehension": {
    "prefix": "dc",
    "body": ["{${1:key}: ${2:value} for ${3:item} in ${4:iterable}}"],
    "description": "Dictionary comprehension"
  },
  "set comprehension": {
    "prefix": "sc",
    "body": ["{${1:expression} for ${2:item} in ${3:iterable}}"],
    "description": "Set comprehension"
  },
  "lambda": {
    "prefix": "lambda",
    "body": ["lambda ${1:parameters}: ${2:expression}"],
    "description": "Lambda function"
  },
  "import": {
    "prefix": "imp",
    "body": ["import ${1:module}"],
    "description": "Import statement"
  },
  "from import": {
    "prefix": "from",
    "body": ["from ${1:module} import ${2:name}"],
    "description": "From import statement"
  },
  "import as": {
    "prefix": "impas",
    "body": ["import ${1:module} as ${2:alias}"],
    "description": "Import as statement"
  },
  "decorator": {
    "prefix": "dec",
    "body": ["def ${1:decorator_name}(func):", "    def wrapper(*args, **kwargs):", "        ${2:# pre-processing}", "        result = func(*args, **kwargs)", "        ${3:# post-processing}", "        return result", "    return wrapper"],
    "description": "Decorator function"
  },
  "dataclass": {
    "prefix": "dataclass",
    "body": ["from dataclasses import dataclass", "", "@dataclass", "class ${1:ClassName}:", "    ${2:field}: ${3:type}"],
    "description": "Dataclass"
  },
  "async function": {
    "prefix": "async",
    "body": ["async def ${1:function_name}(${2:parameters}):", "    \"\"\"${3:docstring}\"\"\"", "    ${4:pass}"],
    "description": "Async function"
  },
  "await": {
    "prefix": "await",
    "body": ["await ${1:expression}"],
    "description": "Await expression"
  },
  "docstring": {
    "prefix": "doc",
    "body": ["\"\"\"${1:Description}", "", "Args:", "    ${2:arg_name} (${3:type}): ${4:description}", "", "Returns:", "    ${5:type}: ${6:description}", "", "Raises:", "    ${7:ExceptionType}: ${8:description}", "\"\"\""]
  },
  "type hint function": {
    "prefix": "defth",
    "body": ["def ${1:function_name}(${2:param}: ${3:type}) -> ${4:return_type}:", "    \"\"\"${5:docstring}\"\"\"", "    ${6:pass}"],
    "description": "Function with type hints"
  },
  "generator": {
    "prefix": "gen",
    "body": ["def ${1:generator_name}(${2:parameters}):", "    \"\"\"${3:docstring}\"\"\"", "    for ${4:item} in ${5:iterable}:", "        yield ${6:value}"],
    "description": "Generator function"
  },
  "context manager": {
    "prefix": "ctx",
    "body": ["class ${1:ContextManager}:", "    def __enter__(self):", "        ${2:pass}", "        return self", "    ", "    def __exit__(self, exc_type, exc_val, exc_tb):", "        ${3:pass}"],
    "description": "Context manager class"
  },
  "unittest test case": {
    "prefix": "test",
    "body": ["import unittest", "", "class Test${1:ClassName}(unittest.TestCase):", "    ", "    def setUp(self):", "        ${2:pass}", "    ", "    def test_${3:method_name}(self):", "        ${4:pass}", "    ", "    def tearDown(self):", "        ${5:pass}", "", "if __name__ == '__main__':", "    unittest.main()"],
    "description": "Unit test case"
  },
  "pytest test": {
    "prefix": "pytest",
    "body": ["def test_${1:function_name}():", "    # Arrange", "    ${2:pass}", "    ", "    # Act", "    ${3:pass}", "    ", "    # Assert", "    assert ${4:condition}"],
    "description": "Pytest test function"
  },
  "fixture": {
    "prefix": "fixture",
    "body": ["@pytest.fixture", "def ${1:fixture_name}():", "    ${2:pass}", "    yield ${3:value}", "    ${4:# cleanup}"],
    "description": "Pytest fixture"
  },
  "argparse": {
    "prefix": "argparse",
    "body": ["import argparse", "", "parser = argparse.ArgumentParser(description='${1:description}')", "parser.add_argument('${2:arg_name}', help='${3:help_text}')", "args = parser.parse_args()"],
    "description": "Argparse setup"
  },
  "pathlib": {
    "prefix": "path",
    "body": ["from pathlib import Path", "", "path = Path('${1:file_path}')"],
    "description": "Pathlib import and usage"
  },
  "logging setup": {
    "prefix": "log",
    "body": ["import logging", "", "logging.basicConfig(level=logging.${1:INFO})", "logger = logging.getLogger(__name__)"],
    "description": "Logging setup"
  },
  "requests get": {
    "prefix": "reqget",
    "body": ["import requests", "", "response = requests.get('${1:url}')", "response.raise_for_status()", "data = response.json()"],
    "description": "Requests GET"
  },
  "requests post": {
    "prefix": "reqpost",
    "body": ["import requests", "", "response = requests.post('${1:url}', json=${2:data})", "response.raise_for_status()", "result = response.json()"],
    "description": "Requests POST"
  },
  "file read": {
    "prefix": "fread",
    "body": ["with open('${1:filename}', 'r') as f:", "    content = f.read()"],
    "description": "File read"
  },
  "file write": {
    "prefix": "fwrite",
    "body": ["with open('${1:filename}', 'w') as f:", "    f.write(${2:content})"],
    "description": "File write"
  },
  "json load": {
    "prefix": "jload",
    "body": ["import json", "", "with open('${1:filename}', 'r') as f:", "    data = json.load(f)"],
    "description": "JSON load from file"
  },
  "json dump": {
    "prefix": "jdump",
    "body": ["import json", "", "with open('${1:filename}', 'w') as f:", "    json.dump(${2:data}, f, indent=2)"],
    "description": "JSON dump to file"
  }
}

