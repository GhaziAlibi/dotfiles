{
  "Print Debug": {
    "prefix": "pd",
    "body": ["println!(\"{:?}\", $1);"],
    "description": "Print debug format"
  },
  "Print Line": {
    "prefix": "pl",
    "body": ["println!(\"$1\");"],
    "description": "Print line"
  },
  "Function": {
    "prefix": "fn",
    "body": [
      "fn $1($2) -> $3 {",
      "    $0",
      "}"
    ],
    "description": "Function definition"
  },
  "Public Function": {
    "prefix": "pubfn",
    "body": [
      "pub fn $1($2) -> $3 {",
      "    $0",
      "}"
    ],
    "description": "Public function definition"
  },
  "Main Function": {
    "prefix": "main",
    "body": [
      "fn main() {",
      "    $0",
      "}"
    ],
    "description": "Main function"
  },
  "Struct": {
    "prefix": "struct",
    "body": [
      "#[derive(Debug$1)]",
      "struct $2 {",
      "    $0",
      "}"
    ],
    "description": "Struct definition"
  },
  "Enum": {
    "prefix": "enum",
    "body": [
      "#[derive(Debug$1)]",
      "enum $2 {",
      "    $0",
      "}"
    ],
    "description": "Enum definition"
  },
  "Implementation": {
    "prefix": "impl",
    "body": [
      "impl $1 {",
      "    $0",
      "}"
    ],
    "description": "Implementation block"
  },
  "Trait Implementation": {
    "prefix": "implfor",
    "body": [
      "impl $1 for $2 {",
      "    $0",
      "}"
    ],
    "description": "Trait implementation"
  },
  "Trait": {
    "prefix": "trait",
    "body": [
      "trait $1 {",
      "    $0",
      "}"
    ],
    "description": "Trait definition"
  },
  "Match": {
    "prefix": "match",
    "body": [
      "match $1 {",
      "    $2 => $3,",
      "    _ => $0,",
      "}"
    ],
    "description": "Match expression"
  },
  "If Let": {
    "prefix": "iflet",
    "body": [
      "if let $1 = $2 {",
      "    $0",
      "}"
    ],
    "description": "If let expression"
  },
  "While Let": {
    "prefix": "whilelet",
    "body": [
      "while let $1 = $2 {",
      "    $0",
      "}"
    ],
    "description": "While let loop"
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for $1 in $2 {",
      "    $0",
      "}"
    ],
    "description": "For loop"
  },
  "Test Function": {
    "prefix": "test",
    "body": [
      "#[test]",
      "fn $1() {",
      "    $0",
      "}"
    ],
    "description": "Test function"
  },
  "Async Function": {
    "prefix": "asyncfn",
    "body": [
      "async fn $1($2) -> $3 {",
      "    $0",
      "}"
    ],
    "description": "Async function"
  },
  "Result": {
    "prefix": "result",
    "body": ["Result<$1, $2>"],
    "description": "Result type"
  },
  "Option": {
    "prefix": "option",
    "body": ["Option<$1>"],
    "description": "Option type"
  },
  "Vector": {
    "prefix": "vec",
    "body": ["Vec<$1>"],
    "description": "Vector type"
  },
  "HashMap": {
    "prefix": "hashmap",
    "body": ["HashMap<$1, $2>"],
    "description": "HashMap type"
  },
  "Module": {
    "prefix": "mod",
    "body": [
      "mod $1 {",
      "    $0",
      "}"
    ],
    "description": "Module definition"
  },
  "Use Statement": {
    "prefix": "use",
    "body": ["use $1;"],
    "description": "Use statement"
  },
  "Derive": {
    "prefix": "derive",
    "body": ["#[derive($1)]"],
    "description": "Derive attribute"
  },
  "Allow Dead Code": {
    "prefix": "allow",
    "body": ["#[allow(dead_code)]"],
    "description": "Allow dead code attribute"
  }
}

